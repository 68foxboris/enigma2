#!/bin/sh

prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@

if [ -d /home/root ]; then
	cd /home/root
	export HOME=/home/root
fi

# workaround for corrupt ssl files
if [ "$(grep -i config.misc.firstrun=true /etc/enigma2/settings)" != "" ]; then
	rm -rf /etc/enigma2/cert.pem &
	rm -rf /etc/enigma2/key.pem &
	ENIGMA_DEBUG=1
fi

#ciplushelper start delay
if [ -e /usr/bin/ciplushelper ]; then
	sleep 3
fi

#Workaround for aspect ratio issue
if [ -e /proc/stb/video/avshutdown ]; then
	echo "down" > /proc/stb/video/avshutdown && echo "up" > /proc/stb/video/avshutdown
fi

if [ -f "/proc/stb/fp/led_color" ]; then
	echo "00ffffff" > /proc/stb/fp/led_color
elif [ -f "/proc/stb/fp/led_brightness" ]; then
	echo "000000ff" > /proc/stb/fp/led_brightness
fi

# any debuglevel passed?
if [ -z $ENIGMA_DEBUG_LVL ]; then
	DEBUG_LVL=3
else
	DEBUG_LVL=$ENIGMA_DEBUG_LVL
fi

# LC_ALL available?
if [ -z $LC_ALL ]; then
	export LC_ALL=en_GB.utf8
fi

LIBS=@libdir@/libopen.so.0.0.0

# enigma main loop
while : ; do
	# show bootlogo on enigma2 start
	if [ -x @bindir@/showiframe ]; then
		if [ -f @sysconfdir@/enigma2/backdrop.mvi ]; then
			@bindir@/showiframe @sysconfdir@/enigma2/backdrop.mvi
		elif [ -f @sysconfdir@/enigma2/bootlogo.mvi ]; then
			@bindir@/showiframe @sysconfdir@/enigma2/bootlogo.mvi
		elif [ -f @datadir@/bootlogo.mvi ]; then
			@bindir@/showiframe @datadir@/bootlogo.mvi
		fi
	fi

	# hook to execute dhcp wait script
	if [ -x @bindir@/enigma2_dhcp_wait.sh ]; then
		@bindir@/enigma2_dhcp_wait.sh
	fi

	# hook to execute scripts always before enigma2 start
	if [ -x @bindir@/enigma2_pre_start.sh ]; then
		@bindir@/enigma2_pre_start.sh
	fi

if [ ! -e /etc/enigma2/settings ]; then
	touch /etc/enigma2/settings
	ENIGMA_DEBUG=1
fi

if [ "$(grep -i config.crash.enabledebug=true /etc/enigma2/settings)" != "" ]; then
	ENIGMA_DEBUG=1
fi

# Randomize timestamp if clock is not set
RANDOMIZE1970=''
time=`date +%Y` ;
if [ "$time" = 1970 ]; then
	RANDOMIZE1970="$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 5 | tr -d '\n')"
fi

# start enigma
sync
# Set time format used to prefix each line in the debug logs.
DEBUGTIME=`sed -En 's|^config\.crash\.debugTimeFormat=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
[ -n "${DEBUGTIME}" ] || DEBUGTIME="2"
DEBUG_TIME="${DEBUGTIME}"

# Create and set log folder
LOGFOLDER="/home/root/logs/"
if [ ! -d $LOGFOLDER ] ; then mkdir -p $LOGFOLDER; fi
if [ "$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')" != "" -a -d "$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')" ]; then
	LOGFOLDER=$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')
fi

# Enable and configure gstreamer debug log of category and level without color
if [ "$(grep -i config.crash.gstdebug=true /etc/enigma2/settings)" != "" ]; then
	GSTDEBUGCATEGORY="*"
	GSTDEBUGLEVEL="INFO"
	if [ "$(grep config.crash.gstdebugcategory= /etc/enigma2/settings | sed 's/config.crash.gstdebugcategory=//g')" != "" ]; then
		GSTDEBUGCATEGORY=$(grep config.crash.gstdebugcategory= /etc/enigma2/settings | sed 's/config.crash.gstdebugcategory=//g')
	fi
	if [ "$(grep config.crash.gstdebuglevel= /etc/enigma2/settings | sed 's/config.crash.gstdebuglevel=//g')" != "" ]; then
		GSTDEBUGLEVEL=$(grep config.crash.gstdebuglevel= /etc/enigma2/settings | sed 's/config.crash.gstdebuglevel=//g')
	fi
	export GST_DEBUG_FILE="${LOGFOLDER}$(date +%Y%m%d-%H%M%S)-gstreamer-debug.log"
	export GST_DEBUG="${GSTDEBUGCATEGORY}:${GSTDEBUGLEVEL}"
	export GST_DEBUG_NO_COLOR="1"
fi

# Enable and set gstreamer directory for pipeline graphs that are not created if directory is not set
if [ "$(grep -i config.crash.gstdot=true /etc/enigma2/settings)" != "" ]; then
	export GST_DEBUG_DUMP_DOT_DIR=${LOGFOLDER}
fi

# Enable generation of core dumps
# It would be best to have this at system startup because this way we may not
# catch core dumps that happen early to enigma2.
# The kernel.core_pattern could be set via /etc/sysctl.conf.
# The size limit could be set via /etc/security/limits.conf.
if [ "$(grep -i config.crash.coredump=true /etc/enigma2/settings)" != "" ]; then
	COREDUMPSIZE=$((10 * 512 * 4 - 1 * 512 * 4)) # size is in blocks (512 byte) so this sets 10 MB - 1 MB for log files
	COREDUMPFILE=${LOGFOLDER}%t-enigma2-core.dump
	if [ "$(grep -i config.crash.sizeloglimit= /etc/enigma2/settings | sed 's/config.crash.sizeloglimit=//g')" != "" ]; then
		COREDUMPSIZE=$(grep -i config.crash.sizeloglimit= /etc/enigma2/settings | sed 's/config.crash.sizeloglimit=//g')
		COREDUMPSIZE=$((${COREDUMPSIZE} * 512 * 4 - 1 * 512 * 4))
	fi
	echo ${COREDUMPFILE} > /proc/sys/kernel/core_pattern
	ulimit -c ${COREDUMPSIZE}
fi

# Start enigma2 with or without debug
if [ -n "$ENIGMA_DEBUG" ]; then
	DEBUG_LVL='4'
	(LD_PRELOAD=$LIBS ENIGMA_DEBUG_LVL=$DEBUG_LVL ENIGMA_DEBUG_TIME="${DEBUG_TIME}" @bindir@/enigma2 &> ${LOGFOLDER}$(date +%Y%m%d-%H%M%S)-enigma2-debug.log) &
else
	(LD_PRELOAD=$LIBS ENIGMA_DEBUG_LVL=$DEBUG_LVL ENIGMA_DEBUG_TIME="${DEBUG_TIME}" @bindir@/enigma2) &
fi

enigma2pid=$!

# Enable generation of core dumps with ELF header included.
# This seem to be required by gdb.
# Would be default if kernel is configured with CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS.
# Default coredump filter can only be set via kernel command line.
# In all other cases this is only available per process.
if [ "$(grep -i config.crash.coredump=true /etc/enigma2/settings)" != "" ]; then
	COREDUMPFILTER=0x33
	echo ${COREDUMPFILTER} > /proc/${enigma2pid}/coredump_filter
fi

wait ${enigma2pid}

# enigma2 exit codes:
#
#  1 - halt
#  2 - reboot
#  3 - restart enigma
#  4 - front processor upgrade
#  5 - install new settings
#  7 - manufacturer reset
# 42 - restart for unattended update
# 43 - restart for network restore
# 44 - restart for autobackup restore
#
# >128 signal

ret=$?
case $ret in
	1)
		/sbin/halt
		;;
	2)
		/sbin/reboot
		;;
	4)
		/sbin/rmmod lcd
		/usr/sbin/fpupgrade --upgrade 2>&1 | tee /home/root/fpupgrade.log
		sleep 1;
		/sbin/rmmod fp
		/sbin/modprobe fp
		/sbin/reboot
		;;
	5)
		if ! grep -q config.misc.RestartUI /etc/enigma2/settings; then
			echo "config.misc.RestartUI=true" >>/etc/enigma2/settings
		fi
		;;
	7)
		rm -R /etc/enigma2
		;;
	42)
		df -P | grep -v "tmpfs " | awk '{print $6}' | tail -n +3 > /tmp/upgrade_mountpoints.txt
		while read line; do
			if [  -f $line/var/lib/opkg/status ]; then
			DESTS=$DESTS" --add-dest "$line":"$line
		fi
		done < /tmp/upgrade_mountpoints.txt
		# bind the console (when available)
		[ -f /sys/class/vtconsole/vtcon1/bind ] && echo 1 > /sys/class/vtconsole/vtcon1/bind
		prevupd=0
		currupd=999
		opkg update 2>&1 | tee /home/root/opkgupgrade.log
		# check if we need to upgrade busybox first
		if [ "$(opkg list-upgradable busybox)" != "" ]; then
			opkg update busybox 2>&1 | tee -a /home/root/opkgupgrade.log
		fi
		# update all other packages
		while [ $currupd -gt 0 -a $currupd -ne $prevupd ]; do
			opkg upgrade $DESTS 2>&1 | tee -a /home/root/opkgupgrade.log
			prevupd=$currupd
			currupd=`opkg list-upgradable | wc -l`
			echo "===> $currupd PACKAGE(S) REMAINING" >> /home/root/opkgupgrade.log
		done
		/sbin/reboot
		;;
	43)
		# restore only network from autobackup
		[ -f /sys/class/vtconsole/vtcon1/bind ] && echo 1 > /sys/class/vtconsole/vtcon1/bind
		/etc/init.d/settings-restore.sh network
		break
		;;
	44)
		# restore autobackup
		[ -f /sys/class/vtconsole/vtcon1/bind ] && echo 1 > /sys/class/vtconsole/vtcon1/bind
		/etc/init.d/settings-restore.sh
		[ -f /etc/init.d/softcam ] && /etc/init.d/softcam restart
		break
		;;
	*)
		break
		;;
esac

done
