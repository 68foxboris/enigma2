<wizard>
		<step id="start" nextstep="introduction">
			<text value="Welcome to your assistant [BRANDMODEL].\nThis start wizard will guide you through the basic setup of your [BRANDMODEL].\nPress the OK button on your remote control to move to the next step."/>
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
		<step id="introduction" >
			<text value="Use the up/down keys on your remote control to select an option. After, press OK."/>
			<list>
				<listentry caption="Use the wizard to set up basic features" step="network"/>
				<listentry caption="Exit the wizard" step="end"/>
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="network" >
			<text value="Connecting your [BRANDMODEL] to the internet."/>
			<list>
				<listentry caption="Check the internet connection" step="update"/>
				<listentry caption="Skip internet connection check (disables automatic package installation)" step="nima"/>
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="update">
			<text value="Checking the internet connection."/>
			<config screen="InstallWizard" module="InstallWizard" args="0" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
		<step id="networkfailed" >
			<condition>
self.condition = not config.misc.installwizard.opkgloaded.value
			</condition>
			<text value="Your [BRANDMODEL] does not have an internet connection."/>
			<list>
				<listentry caption="Check the internet connection again." step="update"/>
				<listentry caption="Skip internet connection check (disables automatic package installation)" step="nima"/>
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="nima">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="0" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimb">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty and not nimmanager.nim_slots[1].isFBCLink()
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="1" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimc">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty and not nimmanager.nim_slots[2].isFBCLink()
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="2" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimd">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty and not nimmanager.nim_slots[3].isFBCLink()
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="3" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nime">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 4 and not nimmanager.nim_slots[4].empty and not nimmanager.nim_slots[4].isFBCLink()
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="4" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimf">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 5 and not nimmanager.nim_slots[5].empty and not nimmanager.nim_slots[5].isFBCLink()
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="5" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimg">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 6 and not nimmanager.nim_slots[6].empty and not nimmanager.nim_slots[6].isFBCLink()
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="6" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimh">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 7 and not nimmanager.nim_slots[7].empty and not nimmanager.nim_slots[7].isFBCLink()
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="7" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimi">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 8 and not nimmanager.nim_slots[8].empty and not nimmanager.nim_slots[8].isFBCLink()
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="8" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimj">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 9 and not nimmanager.nim_slots[9].empty and not nimmanager.nim_slots[9].isFBCLink()
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="9" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimq">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 16 and not nimmanager.nim_slots[16].empty
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="16" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimr">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 17 and not nimmanager.nim_slots[17].empty
			</condition>
			<text value="Please set up tuner [TUNER]"/>
			<config screen="NimSetup" module="Satconfig" args="17" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="channels">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and config.misc.installwizard.hasnetwork.value and config.misc.installwizard.opkgloaded.value
			</condition>
			<text value="Do you want to install a channel list?"/>
			<config screen="InstallWizard" module="InstallWizard" args="1" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="fallbacktuner">
			<condition>
from Components.NimManager import nimmanager
self.condition = not nimmanager.somethingConnected() and config.misc.installwizard.hasnetwork.value and config.misc.installwizard.opkgloaded.value
			</condition>
			<text value="Please configure the fallback tuner setup."/>
			<config screen="SetupFallbacktuner" module="SetupFallbacktuner" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="doscan">
			<text value="What type of service scan do you want?"/>
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected()
			</condition>
			<config screen="InstallWizard" module="InstallWizard" args="3" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
		<step id="plugins">
			<condition>
self.condition = config.misc.installwizard.hasnetwork.value and config.misc.installwizard.opkgloaded.value
			</condition>
			<text value="Do you want to install Plugins?"/>
			<config screen="InstallWizard" module="InstallWizard" args="2" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
		<step id="setup">
			<text value="Please setup the following basic configs."/>
			<config screen="Setup" module="Setup" args="SetupAccessLevels" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
		<step id="end" laststep="true">
			<text value="Thank you for using the wizard. Your [BRANDMODEL] is now ready for use.\n\nPress OK to start."/>
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
</wizard>
